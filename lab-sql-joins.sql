-- List the number of films per category.
USE sakila;
SELECT * FROM film_category;
SELECT * FROM category;
SELECT category.name, COUNT(film_category.category_id) AS films_per_category
FROM category
INNER JOIN film_category
ON category.category_id = film_category.category_id
GROUP BY category.name
ORDER BY category.name ASC;
-- Retrieve the store ID, city, and country for each store 
SELECT * FROM city;
SELECT * FROM country;
SELECT * FROM store;
SELECT * FROM address;
DROP VIEW IF EXISTS StoreDetails;
CREATE VIEW StoreDetails AS
SELECT 
	store.store_id,
    country.country,
    city.city
FROM store
INNER JOIN address
ON address.address_id = store.address_id
INNER JOIN city
ON city.city_id = address.city_id
INNER JOIN country
ON country.country_id = city.country_id;
-- Calculate the total revenue generated by each store in dollars.
SELECT * FROM Storedetails;
SELECT * FROM payment;
SELECT * FROM rental;
SELECT * FROM store;
SELECT * FROM inventory;
SELECT 
	Storedetails.store_id,
	Storedetails.country,
    Storedetails.city,
    CONCAT('$', FORMAT(SUM(payment.amount), 2))  AS total_amount
FROM Storedetails
INNER JOIN store
ON Storedetails.store_id = store.store_id
INNER JOIN inventory
ON inventory.store_id = store.store_id
INNER JOIN rental
ON inventory.inventory_id = rental.inventory_id
INNER JOIN payment
ON rental.rental_id = payment.rental_id
GROUP BY Storedetails.country, Storedetails.city, Storedetails.store_id;
-- Determine the average running time of films for each category.
SELECT * FROM film;
SELECT * FROM category;
SELECT * FROM film_category;
DROP VIEW IF EXISTS avg_running_time;
CREATE VIEW avg_running_time AS
SELECT 
	category.category_id,
    category.name,
    CONCAT(FLOOR(AVG(film.length) / 60), ':', LPAD(MOD(AVG(film.length), 60), 2,'0')) AS average_running_time
FROM category
INNER JOIN film_category
ON film_category.category_id = category.category_id
INNER JOIN film
ON film.film_id = film_category.film_id
GROUP BY category.category_id, category.name;
-- Bonus:
-- Identify the film categories with the longest average running time.
SELECT 
    category.category_id,
    category.name,
    FLOOR(AVG(film.length)) AS avg_running_time_min
FROM category
INNER JOIN film_category
ON film_category.category_id = category.category_id
INNER JOIN film
ON film.film_id = film_category.film_id
GROUP BY category.category_id, category.name
HAVING FLOOR(AVG(film.length)) = (
    SELECT MAX(avg_running_time_min)
    FROM (
        SELECT 
            FLOOR(AVG(film.length)) AS avg_running_time_min
            FROM category
            INNER JOIN film_category
            ON film_category.category_id = category.category_id
            INNER JOIN film
            ON film.film_id = film_category.film_id
            GROUP BY category.category_id
        ) AS avg_times
);
-- Display the top 10 most frequently rented movies in descending order.
SELECT 
    film.film_id,
    film.title,
    COUNT(rental.rental_id) AS rental_count
FROM film
INNER JOIN inventory
ON film.film_id = inventory.film_id
INNER JOIN rental
ON inventory.inventory_id = rental.inventory_id
GROUP BY film.film_id, film.title
ORDER BY rental_count DESC
LIMIT 10;
-- Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT 
	store.store_id,
    film.title
FROM 
    film
INNER JOIN inventory
ON inventory.film_id = film.film_id
INNER JOIN store
ON store.store_id = inventory.store_id
WHERE 
    film.title = "ACADEMY DINOSAUR"
    AND store.store_id = 1;
-- Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."
SELECT 
    film.title,
    CASE 
        WHEN COUNT(inventory.inventory_id) = 0 THEN 'NOT available'
        ELSE 'Available'
    END AS availability_status
FROM 
    film
LEFT JOIN inventory
ON film.film_id = inventory.film_id
GROUP BY 
    film.film_id, film.title;
